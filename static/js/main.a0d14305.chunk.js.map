{"version":3,"sources":["ImageNames.js","components/Navbar/Navbar.js","components/ImageBlock/ImageBlock.js","components/ImageInventory/ImageInventory.js","components/Banner/Banner.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ImageNames","Navbar","props","className","href","id","gameStatus","feedback","score","topScore","ImageBlock","src","process","imageName","alt","height","imageBlockHeight","width","imageBlockWidth","onClick","clickHandler","ImageInventory","imageNames","map","index","key","Banner","Footer","App","state","clickedImages","handleClick","event","clickedImageName","target","imageClickedBefore","setState","shuffle","newScore","length","clickedImagesCopy","slice","push","newTopScore","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","this","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0d14305.chunk.js","sourcesContent":["let ImageNames = [\"louvre.jpg\", \"statueofliberty.jpg\", \"kauffmancenter.jpg\", \"cloudgate.jpg\", \"gatewayarch.jpg\", \"tenthousandbuddhas.jpg\", \"palaceofwestminster.jpg\", \"spaceneedle.jpg\", \"sydneyoperahouse.jpg\", \"santorini.jpg\", \"colosseumrome.jpg\", \"angkorwat.jpg\", \"sphinx.jpg\", \"schonbrunnpalace.jpg\", \"kualalumpur.jpg\", \"jeffersonmemorial.jpg\"];\n\nexport default ImageNames;","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <div className=\"bg-primary navbar-dark container-fluid text-center pt-1 pb-1\">\n        <div className=\"row\">\n            <div className=\"col-md-4\">\n                <h2><a href=\".\" className=\"text-white nounderline\" id=\"appname\">The Siteseeing Game</a></h2>\n            </div>\n            <div className={\"col-md-4 \" + (props.gameStatus == \"2\" ? \" text-danger\" : (props.gameStatus == \"1\" ? \" text-warning\" : \" text-warning\"))}>\n                <h3>{props.feedback}</h3>\n            </div>\n            <div className=\"col-md-4 text-white nounderline\">\n                <h3>Score: {props.score} | Top Score: {props.topScore}</h3>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./ImageBlock.css\";\n\nconst ImageBlock = (props) => (\n    <img className={\"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock rounded \" + (props.gameStatus == \"2\" ? \" gameLost\" : (props.gameStatus == \"1\" ? \" gameWon\" : \"\"))} src={process.env.PUBLIC_URL + \"/images/\" + props.imageName} alt={props.alt} height={props.imageBlockHeight} width={props.imageBlockWidth} onClick={props.clickHandler} />\n);\n\nexport default ImageBlock;","import React from \"react\";\n//import \"./ImageInventory.css\";\nimport ImageBlock from \"../ImageBlock\";\n\nconst ImageInventory = (props) => (\n    <div className=\"container\">\n        <div className=\"row\">\n            {props.imageNames.map((imageName, index) => {\n                return <ImageBlock key={index} imageName={imageName} alt={imageName} clickHandler={props.clickHandler} gameStatus={props.gameStatus} />\n            })}\n        </div>\n    </div>\n);\n\nexport default ImageInventory;","import React from \"react\";\nimport \"./Banner.css\";\nimport ImageInventory from \"../ImageInventory\";\n\nconst Banner = () => (\n    <div className=\"jumbotron jumbotron-fluid text-center\">\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-8 offset-md-2 offset-md-right-2\">\n                    <h1>The Sightseeing Game</h1>\n                    <h4>Click on each landmark once to earn points.</h4><h4>Don't click on a landmark more than once!</h4>\n                </div>\n            </div>\n        </div>\n    </div>\n);\nexport default Banner;","\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer text-center\">\n        <span>The Siteseeing Game</span>\n    </footer>\n);\n\nexport default Footer;","import React, { Component } from \"react\";\nimport ImageNames from \"./ImageNames\";\nimport Navbar from \"./components/Navbar\";\nimport Banner from \"./components/Banner\";\nimport ImageInventory from \"./components/ImageInventory\";\nimport Footer from \"./components/Footer\";\n\n\nclass App extends Component {\n  state = {\n    imageNames: ImageNames,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    feedback: \"Click an image to begin!\",\n    gameStatus: 0\n  };\n\n  componentDidMount() {\n    this.setState({\n      imageNames: this.shuffle(this.state.imageNames)\n    }, () => {\n      console.log(\"Shuffled the images when the game starts\");\n    });\n  }\n\n  handleClick = event => {\n\n    const clickedImageName = event.target.alt;\n\n    const wasImageClickedBefore = this.imageClickedBefore(clickedImageName);\n    if (wasImageClickedBefore) {\n      this.setState({\n        imageNames: this.shuffle(this.state.imageNames),\n\n        clickedImages: [],\n        score: 0,\n        feedback: \"You guessed the same image twice. Game over!\",\n        gameStatus: 2\n      }, () => {\n\n      });\n    } else {\n      let newScore = this.state.score + 1;\n      if (newScore === this.state.imageNames.length) {\n        this.setState({\n          imageNames: this.shuffle(this.state.imageNames),\n\n          clickedImages: [],\n          score: 0,\n          topScore: newScore,\n          feedback: \"You guessed all of the images correctly!\",\n          gameStatus: 1\n        });\n      } else {\n        const clickedImagesCopy = this.state.clickedImages.slice();\n        clickedImagesCopy.push(clickedImageName);\n        const newTopScore = (newScore > this.state.topScore) ? newScore : this.state.topScore;\n        this.setState({\n          imageNames: this.shuffle(this.state.imageNames),\n\n          clickedImages: clickedImagesCopy,\n          score: newScore,\n          topScore: newTopScore,\n          feedback: \"You guessed the image correctly! Keep going!\",\n          gameStatus: 0\n        }, () => {\n\n        });\n      }\n    }\n  };\n\n  imageClickedBefore = (clickedImageName) => {\n    for (let index = 0; index < this.state.clickedImages.length; index++) {\n      if (this.state.clickedImages[index] === clickedImageName) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} feedback={this.state.feedback} gameStatus={this.state.gameStatus} />\n        <Banner />\n        <ImageInventory imageNames={this.state.imageNames} clickHandler={this.handleClick} gameStatus={this.state.gameStatus} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}